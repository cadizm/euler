#!/usr/bin/env python

#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
# ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred
# divisors?
#

class TriangleNumberGenerator():
    'http://en.wikipedia.org/wiki/Triangular_number'
    def __init__(self):
        self.n = 0
        self.sum = 0

    def next(self):
        self.n += 1
        self.sum += self.n
        return self.sum


def eratosthenes(n):
    'http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes'
    def next_index(j, P):
        for i, flag in P:
            if i > j and flag:
                return i
        return None
    P = [[i, True] for i in range(n + 1)]
    j = 1
    while True:
        j = next_index(j, P)
        if j**2 > n:
            break
        for k in range(j**2, len(P), j):
            P[k][1] = False
    return [i for i, flag in P if flag and i > 1]


def factorize(n, P=eratosthenes(1000)):
    """Integer factorization of n using list of primes P
    Return list of tuples of prime factors. e.g.:
    [(2, 3), (3, 2)] = 2^3 * 3^2 = 72"""
    F, N = [], n
    for p in P:
        e = 0
        while n % p == 0:
            e += 1
            n /= p
        if e:
            F.append((p, e))
    return F


def ndivisors(n, P=eratosthenes(1000)):
    """Compute number of divisors
    http://primes.utm.edu/glossary/xpage/tau.html"""
    if n < 0:
        return 0
    elif n == 1:
        return 1
    elif n in P:
        return 2
    F = factorize(n, P)
    E = [e + 1 for p, e in F]
    return reduce(lambda x, y: x * y, E)


if __name__ == '__main__':
    P = eratosthenes(6500)  # 6500 by trial/error
    t = TriangleNumberGenerator()
    while True:
        n = t.next()
        if ndivisors(n, P) > 500:
            print n
            break
